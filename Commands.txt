** Создать двух пользователей (с помощью метода User.objects.create_user).
>>> user1 = User.objects.create(username='Frank', first_name='Rabe')
>>> user2 = User.objects.create(username='Tomas', first_name='Lee')

** Создать два объекта модели Author, связанные с пользователями.
>>> Author.objects.create(authorUser=user1)
<Author: Author object (1)>

>>> Author.objects.create(authorUser=user2)
<Author: Author object (2)>

** Добавить 4 категории в модель Category.
>>> Category.objects.create(name='Sport')
<Category: Category object (1)>

>>> Category.objects.create(name='Education')
<Category: Category object (2)>

>>> Category.objects.create(name='Society') 
<Category: Category object (3)>

>>> Category.objects.create(name='IT')
<Category: Category object (4)>

** Добавить 2 статьи и 1 новость.
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Frank')), categoryType='AR', title='article title 5678', text='article text uio 57 yui')
<Post: Post object (1)>

>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Tomas')), categoryType='NW', title='news title okjh', text='news text 87y ty')
<Post: Post object (2)>

>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='Frank')), categoryType='AR', title='article title fg', text='article text ty7uhoiuhnm hjk')
<Post: Post object (3)>

** Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> p1 = Post.objects.get(pk=1)
>>> p2 = Post.objects.get(pk=2)
>>> p3 = Post.objects.get(pk=3)



** Это наши категории:
>>> c1 = Category.objects.get(name='Sport')
>>> c2 = Category.objects.get(name='Education')
>>> c3 = Category.objects.get(name='Society')
>>> c4 = Category.objects.get(name='IT')

** Статьи связываем с категориями:
>>> p1.postCategory.add(c1, c3)
>>> p2.postCategory.add(c2, c4)
>>> p3.postCategory.add(c3)

** Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).
>>> Comment.objects.create(commentUser=User.objects.get(username='Tomas'), commentPost=Post.objects.get(pk=1), text='Comment text rty ijhgv 7uj')
<Comment: Tomas>
>>> Comment.objects.create(commentUser=User.objects.get(username='Frank'), commentPost=Post.objects.get(pk=2), text='text comment yuj lkjbv 4fghjk')
<Comment: Frank>
>>> Comment.objects.create(commentUser=User.objects.get(username='Frank'), commentPost=Post.objects.get(pk=3), text='text comment wertghjm9un uytfghk') 
<Comment: Frank>
>>> Comment.objects.create(commentUser=User.objects.get(username='Tomas'), commentPost=Post.objects.get(pk=2), text='Comment text ugh i8 ujn')        
<Comment: Tomas>
>>> Comment.objects.create(commentUser=User.objects.get(username='Tomas'), commentPost=Post.objects.get(pk=1), text='Comment text uhghjj kjngh i8')   
<Comment: Tomas>

** Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=1).like()
>>> Post.objects.get(pk=2).like()  
>>> Post.objects.get(pk=3).like()  
>>> Post.objects.get(pk=3).dislike()
>>> Post.objects.get(pk=2).dislike()  
>>> Post.objects.get(pk=1).like()     

>>> Comment.objects.get(pk=1).like()
>>> Comment.objects.get(pk=2).like()  
>>> Comment.objects.get(pk=2).like()
>>> Comment.objects.get(pk=1).like() 
>>> Comment.objects.get(pk=3).like()  
>>> Comment.objects.get(pk=4).like()  
>>> Comment.objects.get(pk=5).dislike()
>>> Comment.objects.get(pk=2).dislike()  
>>> Comment.objects.get(pk=1).dislike()

** Обновить рейтинги пользователей.
  
>>> Author.objects.get(authorUser=User.objects.get(username='Frank')).update_rating()
>>> Author.objects.get(authorUser=User.objects.get(username='Tomas')).update_rating()

>>> a = Author.objects.get(authorUser=User.objects.get(username='Tomas'))
>>> a.ratingAuthor
1
>>> Author.objects.get(authorUser=User.objects.get(username='Frank')).ratingAuthor
11

** Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> best = Author.objects.all().order_by('-ratingAuthor').values('authorUser__username', 'ratingAuthor')[0]
>>> print(best)
{'authorUser__username': 'Frank', 'ratingAuthor': 11}

** Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
>>> best_post = Post.objects.all().order_by('-rating').values('dateCreation', 'author__authorUser__username', 'rating', 'title')[0]       
>>> print(best_post)
{'dateCreation': datetime.datetime(2023, 4, 4, 13, 28, 59, 300459, tzinfo=datetime.timezone.utc), 'author__authorUser__username': 'Frank', 'rating': 3, 'title': 'article title 5678'}

** Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> best_ppost = Post.objects.all().order_by('-rating')[0]
>>> print(best_ppost)
Post object (1)

>>> com_best_ppost = Comment.objects.filter(commentPost__id = best_ppost.id).values('dateCreation', 'commentUser__username', 'rating', 'text')   
>>> print(com_best_ppost)
<QuerySet [
{'dateCreation': datetime.datetime(2023, 4, 4, 13, 58, 14, 965599, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Tomas', 'rating': 1, 'text': 'Comment text rty ijhgv 7uj'}, 
{'dateCreation': datetime.datetime(2023, 4, 4, 14, 1, 52, 472331, tzinfo=datetime.timezone.utc), 'commentUser__username': 'Tomas', 'rating': -1, 'text': 'Comment text uhghjj kjngh i8'}
]>
